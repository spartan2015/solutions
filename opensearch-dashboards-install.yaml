# Please edit the object below. Lines beginning with a '#' will be ignored,
# and an empty file will abort the edit. If an error occurs while saving this file will be
# reopened with the relevant failures.
#
apiVersion: v1
data:
  helper.js: |-
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.callTokenEndpoint = callTokenEndpoint;
    exports.composeLogoutUrl = composeLogoutUrl;
    exports.getBaseRedirectUrl = getBaseRedirectUrl;
    exports.getExpirationDate = getExpirationDate;
    exports.getRootUrl = getRootUrl;
    exports.parseTokenResponse = parseTokenResponse;

    var _querystring = require("querystring");

    /*
     *   Copyright OpenSearch Contributors
     *
     *   Licensed under the Apache License, Version 2.0 (the "License").
     *   You may not use this file except in compliance with the License.
     *   A copy of the License is located at
     *
     *       http://www.apache.org/licenses/LICENSE-2.0
     *
     *   or in the "license" file accompanying this file. This file is distributed
     *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
     *   express or implied. See the License for the specific language governing
     *   permissions and limitations under the License.
     */
    function parseTokenResponse(payload) {
      const payloadString = payload.toString();

      if (payloadString.trim()[0] === '{') {
        try {
          return JSON.parse(payloadString);
        } catch (error) {
          throw Error(`Invalid JSON payload: ${error}`);
        }
      }

      return (0, _querystring.parse)(payloadString);
    }

    function getRootUrl(config, core, request) {
      var _config$openid;

      const host = core.http.getServerInfo().hostname;
      const port = core.http.getServerInfo().port;
      let protocol = core.http.getServerInfo().protocol;
      let httpHost = `${host}:${port}`;

      if ((_config$openid = config.openid) !== null && _config$openid !== void 0 && _config$openid.trust_dynamic_headers) {
        const xForwardedHost = request.headers['x-forwarded-host'] || undefined;
        const xForwardedProto = request.headers['x-forwarded-proto'] || undefined;

        if (xForwardedHost) {
          httpHost = xForwardedHost;
        }

        if (xForwardedProto) {
          protocol = xForwardedProto;
        }
      }

      return `${protocol}://${httpHost}`;
    }

    function getBaseRedirectUrl(config, core, request) {
      var _config$openid2;

      if ((_config$openid2 = config.openid) !== null && _config$openid2 !== void 0 && _config$openid2.base_redirect_url) {
        const baseRedirectUrl = config.openid.base_redirect_url;
        return baseRedirectUrl.endsWith('/') ? baseRedirectUrl.slice(0, -1) : baseRedirectUrl;
      }

      const rootUrl = getRootUrl(config, core, request);

      if (core.http.basePath.serverBasePath) {
        return `${rootUrl}${core.http.basePath.serverBasePath}`;
      }

      return rootUrl;
    }

    async function callTokenEndpoint(tokenEndpoint, query, wreckClient) {
      var _tokenResponse$res;

      const tokenResponse = await wreckClient.post(tokenEndpoint, {
        payload: (0, _querystring.stringify)(query),
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded'
        }
      });

      if (!((_tokenResponse$res = tokenResponse.res) !== null && _tokenResponse$res !== void 0 && _tokenResponse$res.statusCode) || tokenResponse.res.statusCode < 200 || tokenResponse.res.statusCode > 299) {
        throw new Error(`Failed calling token endpoint: ${tokenResponse.res.statusCode} ${tokenResponse.res.statusMessage}`);
      }

      const tokenPayload = parseTokenResponse(tokenResponse.payload);
      return {
        idToken: tokenPayload.id_token,
        accessToken: tokenPayload.access_token,
        refreshToken: tokenPayload.refresh_token,
        expiresIn: tokenPayload.expires_in
      };
    }

    function composeLogoutUrl(customLogoutUrl, idpEndsessionEndpoint, additionalQueryParams) {
      const logoutEndpont = customLogoutUrl || idpEndsessionEndpoint;
      const logoutUrl = new URL(logoutEndpont);
      Object.keys(additionalQueryParams).forEach(key => {
        logoutUrl.searchParams.append(key, additionalQueryParams[key]);
      });
      return logoutUrl.toString();
    }

    function getExpirationDate(idToken) {
      if (!idToken) {
        throw new Error("Invalid token");
      } else {
        const parts = idToken.split(".");
    
        if (parts.length != 3) {
          throw new Error("Invalid token");
        }
    
        const claim = JSON.parse(Buffer.from(parts[1], 'base64').toString());
        return claim.exp * 1000;
      }
    }
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,
  openid_auth.js: |-
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OpenIdAuthentication = void 0;

    var fs = _interopRequireWildcard(require("fs"));

    var _wreck = _interopRequireDefault(require("@hapi/wreck"));

    var _http = _interopRequireDefault(require("http"));

    var _https = _interopRequireDefault(require("https"));

    var _routes = require("./routes");

    var _authentication_type = require("../authentication_type");

    var _helper = require("./helper");

    var _next_url = require("../../../utils/next_url");

    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

    function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

    function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    class OpenIdAuthentication extends _authentication_type.AuthenticationType {
      constructor(config, sessionStorageFactory, router, esClient, core, logger) {
        var _this$config$openid, _this$config$openid2;

        super(config, sessionStorageFactory, router, esClient, core, logger);

        _defineProperty(this, "type", 'openid');

        _defineProperty(this, "openIdAuthConfig", void 0);

        _defineProperty(this, "authHeaderName", void 0);

        _defineProperty(this, "openIdConnectUrl", void 0);

        _defineProperty(this, "wreckClient", void 0);

        this.wreckClient = this.createWreckClient();
        this.openIdAuthConfig = {};
        this.authHeaderName = ((_this$config$openid = this.config.openid) === null || _this$config$openid === void 0 ? void 0 : _this$config$openid.header) || '';
        this.openIdAuthConfig.authHeaderName = this.authHeaderName;
        this.openIdConnectUrl = ((_this$config$openid2 = this.config.openid) === null || _this$config$openid2 === void 0 ? void 0 : _this$config$openid2.connect_url) || '';
        let scope = this.config.openid.scope;

        if (scope.indexOf('openid') < 0) {
          scope = `openid ${scope}`;
        }

        this.openIdAuthConfig.scope = scope;
        this.init();
      }

      async init() {
        try {
          const response = await this.wreckClient.get(this.openIdConnectUrl);
          const payload = JSON.parse(response.payload);
          this.openIdAuthConfig.authorizationEndpoint = payload.authorization_endpoint;
          this.openIdAuthConfig.tokenEndpoint = payload.token_endpoint;
          this.openIdAuthConfig.endSessionEndpoint = payload.end_session_endpoint || undefined;
          const routes = new _routes.OpenIdAuthRoutes(this.router, this.config, this.sessionStorageFactory, this.openIdAuthConfig, this.securityClient, this.coreSetup, this.wreckClient);
          routes.setupRoutes();
        } catch (error) {
          this.logger.error(error); // TODO: log more info

          throw new Error('Failed when trying to obtain the endpoints from your IdP');
        }
      }

      createWreckClient() {
        var _this$config$openid3, _this$config$openid4;

        const wreckHttpsOption = {};

        if ((_this$config$openid3 = this.config.openid) !== null && _this$config$openid3 !== void 0 && _this$config$openid3.root_ca) {
          wreckHttpsOption.ca = [fs.readFileSync(this.config.openid.root_ca)];
        }

        if (((_this$config$openid4 = this.config.openid) === null || _this$config$openid4 === void 0 ? void 0 : _this$config$openid4.verify_hostnames) === false) {
          this.logger.debug(`openId auth 'verify_hostnames' option is off.`);

          wreckHttpsOption.checkServerIdentity = (host, cert) => {
            return undefined;
          };
        }

        if (Object.keys(wreckHttpsOption).length > 0) {
          return _wreck.default.defaults({
            agents: {
              http: new _http.default.Agent(),
              https: new _https.default.Agent(wreckHttpsOption),
              httpsAllowUnauthorized: new _https.default.Agent({
                rejectUnauthorized: false
              })
            }
          });
        } else {
          return _wreck.default;
        }
      }

      requestIncludesAuthInfo(request) {
        return request.headers.authorization ? true : false;
      }

      getAdditionalAuthHeader(request) {
        return {};
      }

      getCookie(request, authInfo) {
        return {
          username: authInfo.user_name,
          credentials: {
            authHeaderValue: request.headers.authorization
          },
          authType: this.type,
          expiryTime: Date.now() + this.config.session.ttl
        };
      } // TODO: Add token expiration check here


      async isValidCookie(cookie) {
        var _cookie$credentials, _cookie$credentials2, _cookie$credentials3;

        if (cookie.authType !== this.type || !cookie.username || !cookie.expiryTime || !((_cookie$credentials = cookie.credentials) !== null && _cookie$credentials !== void 0 && _cookie$credentials.authHeaderValue) || !((_cookie$credentials2 = cookie.credentials) !== null && _cookie$credentials2 !== void 0 && _cookie$credentials2.expires_at)) {
          return false;
        }

        if (((_cookie$credentials3 = cookie.credentials) === null || _cookie$credentials3 === void 0 ? void 0 : _cookie$credentials3.expires_at) > Date.now()) {
          return true;
        } // need to renew id token


        if (cookie.credentials.refresh_token) {
          try {
            var _this$config$openid5, _this$config$openid6;

            const query = {
              grant_type: 'refresh_token',
              client_id: (_this$config$openid5 = this.config.openid) === null || _this$config$openid5 === void 0 ? void 0 : _this$config$openid5.client_id,
              client_secret: (_this$config$openid6 = this.config.openid) === null || _this$config$openid6 === void 0 ? void 0 : _this$config$openid6.client_secret,
              refresh_token: cookie.credentials.refresh_token
            };
            const refreshTokenResponse = await (0, _helper.callTokenEndpoint)(this.openIdAuthConfig.tokenEndpoint, query, this.wreckClient); // if no id_token from refresh token call, maybe the Idp doesn't allow refresh id_token

            if (refreshTokenResponse.idToken) {
              cookie.credentials = {
                authHeaderValue: `Bearer ${refreshTokenResponse.idToken}`,
                refresh_token: refreshTokenResponse.refreshToken,
                expires_at: (0, _helper.getExpirationDate)(refreshTokenResponse.idToken) // expiresIn is in second

              };
              return true;
            } else {
              return false;
            }
          } catch (error) {
            this.logger.error(error);
            return false;
          }
        } else {
          // no refresh token, and current token is expired
          return false;
        }
      }

      handleUnauthedRequest(request, response, toolkit) {
        if (this.isPageRequest(request)) {
          // nextUrl is a key value pair
          const nextUrl = (0, _next_url.composeNextUrlQueryParam)(request, this.coreSetup.http.basePath.serverBasePath);
          return response.redirected({
            headers: {
              location: `${this.coreSetup.http.basePath.serverBasePath}/auth/openid/login?${nextUrl}`
            }
          });
        } else {
          return response.unauthorized();
        }
      }

      buildAuthHeaderFromCookie(cookie) {
        var _cookie$credentials4;

        const header = {};
        const authHeaderValue = (_cookie$credentials4 = cookie.credentials) === null || _cookie$credentials4 === void 0 ? void 0 : _cookie$credentials4.authHeaderValue;

        if (authHeaderValue) {
          header.authorization = authHeaderValue;
        }

        return header;
      }

    }

    exports.OpenIdAuthentication = OpenIdAuthentication;
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,
  routes.js: |-
    "use strict";

    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.OpenIdAuthRoutes = void 0;

    var _configSchema = require("@osd/config-schema");

    var _cryptiles = require("@hapi/cryptiles");

    var _querystring = require("querystring");

    var _helper = require("./helper");

    var _next_url = require("../../../utils/next_url");

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    class OpenIdAuthRoutes {
      constructor(router, config, sessionStorageFactory, openIdAuthConfig, securityClient, core, wreckClient) {
        this.router = router;
        this.config = config;
        this.sessionStorageFactory = sessionStorageFactory;
        this.openIdAuthConfig = openIdAuthConfig;
        this.securityClient = securityClient;
        this.core = core;
        this.wreckClient = wreckClient;
      }

      redirectToLogin(request, response) {
        this.sessionStorageFactory.asScoped(request).clear();
        return response.redirected({
          headers: {
            location: `${this.core.http.basePath.serverBasePath}/auth/openid/login`
          }
        });
      }

      setupRoutes() {
        this.router.get({
          path: `/auth/openid/login`,
          validate: {
            query: _configSchema.schema.object({
              code: _configSchema.schema.maybe(_configSchema.schema.string()),
              nextUrl: _configSchema.schema.maybe(_configSchema.schema.string({
                validate: _next_url.validateNextUrl
              })),
              state: _configSchema.schema.maybe(_configSchema.schema.string()),
              refresh: _configSchema.schema.maybe(_configSchema.schema.string())
            }, {
              unknowns: 'allow'
            })
          },
          options: {
            authRequired: false
          }
        }, async (context, request, response) => {
          var _this$config$openid2, _this$config$openid3;

          // implementation refers to https://github.com/hapijs/bell/blob/master/lib/oauth.js
          // Sign-in initialization
          if (!request.query.code) {
            var _this$config$openid;

            const nonce = (0, _cryptiles.randomString)(OpenIdAuthRoutes.NONCE_LENGTH);
            const query = {
              client_id: (_this$config$openid = this.config.openid) === null || _this$config$openid === void 0 ? void 0 : _this$config$openid.client_id,
              response_type: 'code',
              redirect_uri: `${(0, _helper.getBaseRedirectUrl)(this.config, this.core, request)}/auth/openid/login`,
              state: nonce,
              scope: this.openIdAuthConfig.scope
            };
            const queryString = (0, _querystring.stringify)(query);
            const location = `${this.openIdAuthConfig.authorizationEndpoint}?${queryString}`;
            const cookie = {
              oidc: {
                state: nonce,
                nextUrl: request.query.nextUrl || '/'
              }
            };
            this.sessionStorageFactory.asScoped(request).set(cookie);
            return response.redirected({
              headers: {
                location
              }
            });
          } // Authentication callback
          // validate state first


          let cookie;

          try {
            var _cookie$oidc;

            cookie = await this.sessionStorageFactory.asScoped(request).get();

            if (!cookie || !((_cookie$oidc = cookie.oidc) !== null && _cookie$oidc !== void 0 && _cookie$oidc.state) || cookie.oidc.state !== request.query.state) {
              return this.redirectToLogin(request, response);
            }
          } catch (error) {
            return this.redirectToLogin(request, response);
          }

          const nextUrl = cookie.oidc.nextUrl;
          const clientId = (_this$config$openid2 = this.config.openid) === null || _this$config$openid2 === void 0 ? void 0 : _this$config$openid2.client_id;
          const clientSecret = (_this$config$openid3 = this.config.openid) === null || _this$config$openid3 === void 0 ? void 0 : _this$config$openid3.client_secret;
          const query = {
            grant_type: 'authorization_code',
            code: request.query.code,
            redirect_uri: `${(0, _helper.getBaseRedirectUrl)(this.config, this.core, request)}/auth/openid/login`,
            client_id: clientId,
            client_secret: clientSecret
          };

          try {
            var _this$config$openid4;

            const tokenResponse = await (0, _helper.callTokenEndpoint)(this.openIdAuthConfig.tokenEndpoint, query, this.wreckClient);
            const user = await this.securityClient.authenticateWithHeader(request, this.openIdAuthConfig.authHeaderName, `Bearer ${tokenResponse.idToken}`); // set to cookie

            const sessionStorage = {
              username: user.username,
              credentials: {
                authHeaderValue: `Bearer ${tokenResponse.idToken}`,
                expires_at: (0, _helper.getExpirationDate)(tokenResponse.idToken) // expiresIn is in second

              },
              authType: 'openid',
              expiryTime: Date.now() + this.config.session.ttl
            };

            if ((_this$config$openid4 = this.config.openid) !== null && _this$config$openid4 !== void 0 && _this$config$openid4.refresh_tokens && tokenResponse.refreshToken) {
              Object.assign(sessionStorage.credentials, {
                refresh_token: tokenResponse.refreshToken
              });
            }

            this.sessionStorageFactory.asScoped(request).set(sessionStorage);
            return response.redirected({
              headers: {
                location: nextUrl
              }
            });
          } catch (error) {
            context.security_plugin.logger.error(`OpenId authentication failed: ${error}`);

            if (error.toString().toLowerCase().includes('authentication exception')) {
              return response.unauthorized();
            } else {
              return this.redirectToLogin(request, response);
            }
          }
        });
        this.router.get({
          path: `/auth/logout`,
          validate: false
        }, async (context, request, response) => {
          var _this$config$openid5;

          const cookie = await this.sessionStorageFactory.asScoped(request).get();
          this.sessionStorageFactory.asScoped(request).clear(); // authHeaderValue is the bearer header, e.g. "Bearer <auth_token>"

          const token = cookie === null || cookie === void 0 ? void 0 : cookie.credentials.authHeaderValue.split(' ')[1]; // get auth token

          const logoutQueryParams = {
            post_logout_redirect_uri: (0, _helper.getBaseRedirectUrl)(this.config, this.core, request),
            id_token_hint: token
          };
          const endSessionUrl = (0, _helper.composeLogoutUrl)((_this$config$openid5 = this.config.openid) === null || _this$config$openid5 === void 0 ? void 0 : _this$config$openid5.logout_url, this.openIdAuthConfig.endSessionEndpoint, logoutQueryParams);
          return response.redirected({
            headers: {
              location: endSessionUrl
            }
          });
        });
      }

    }

    exports.OpenIdAuthRoutes = OpenIdAuthRoutes;

    _defineProperty(OpenIdAuthRoutes, "NONCE_LENGTH", 22);
    //# sourceMappingURL=data:application/json;charset=utf-8;base64,
kind: ConfigMap
metadata:
  name: dashboard-security-override
  namespace: elastic-system
---
# Source: opensearch-dashboards/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: opensearch-dashboards-dashboards
  labels:
    helm.sh/chart: opensearch-dashboards-2.2.2
    app.kubernetes.io/name: opensearch-dashboards
    app.kubernetes.io/instance: opensearch-dashboards
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: opensearch-dashboards/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: opensearch-dashboards-config
  labels: 
    helm.sh/chart: opensearch-dashboards-2.2.2
    app.kubernetes.io/name: opensearch-dashboards
    app.kubernetes.io/instance: opensearch-dashboards
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
data:
  opensearch_dashboards.yml: |
    opensearch.password: ****
    opensearch.requestHeadersAllowlist:
    - Authorization
    - security_tenant
    opensearch.ssl.verificationMode: none
    opensearch.username: kibanaserver
    opensearch_security.auth.type: openid
    opensearch_security.openid.base_redirect_url: https://server.net
    opensearch_security.openid.client_id: [to set]
    opensearch_security.openid.client_secret: [to set]
    opensearch_security.openid.connect_url: https://gitlab.com/.well-known/openid-configuration
    opensearch_security.openid.scope: openid profile email
    opensearch_security.session.keepalive: true
    opensearch_security.cookie.ttl: 1200000
    opensearch_security.session.ttl: 1200000
    opensearch_security.openid.refresh_tokens: true 
    server:
      host: server.net
      name: server.net
---
# Source: opensearch-dashboards/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    helm.sh/chart: opensearch-dashboards-2.2.2
    app.kubernetes.io/name: opensearch-dashboards
    app.kubernetes.io/instance: opensearch-dashboards
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
  name: opensearch-dashboards-dashboards-rolebinding
roleRef:
  kind: Role
  name: opensearch-dashboards-dashboards
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: opensearch-dashboards-dashboards
  namespace: elastic-system
---
# Source: opensearch-dashboards/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: opensearch-dashboards
  labels:
    helm.sh/chart: opensearch-dashboards-2.2.2
    app.kubernetes.io/name: opensearch-dashboards
    app.kubernetes.io/instance: opensearch-dashboards
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: ClusterIP
  ports:
  - port: 5601
    protocol: TCP
    name: http
    targetPort: 5601
  selector:
    app: opensearch-dashboards
    release: "opensearch-dashboards"
---
# Source: opensearch-dashboards/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
    meta.helm.sh/release-name: opensearch-dashboards
    meta.helm.sh/release-namespace: elastic-system
  creationTimestamp: "2022-07-23T08:11:52Z"
  generation: 2
  labels:
    app.kubernetes.io/instance: opensearch-dashboards
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: opensearch-dashboards
    app.kubernetes.io/version: 2.1.0
    helm.sh/chart: opensearch-dashboards-2.2.2
  name: opensearch-dashboards
  namespace: elastic-system
  resourceVersion: "55685460"
  uid: b6d5d0af-9e8e-44d8-8cdd-35f8214b610f
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: opensearch-dashboards
      release: opensearch-dashboards
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        configchecksum: fa87dfc92c9689fb26130d07a93ec09b6840c4285cb50688d6655346bd3052e
      creationTimestamp: null
      labels:
        app: opensearch-dashboards
        release: opensearch-dashboards
    spec:
      containers:
      - env:
        - name: OPENSEARCH_HOSTS
          value: https://opensearch-cluster-master:9200
        - name: SERVER_HOST
          value: 0.0.0.0
        command:
          - sh
          - -c
        args:
          - rm /usr/share/opensearch-dashboards/plugins/securityDashboards/server/auth/types/openid/*; cp /override/* /usr/share/opensearch-dashboards/plugins/securityDashboards/server/auth/types/openid; ls -al /usr/share/opensearch-dashboards/plugins/securityDashboards/server/auth/types/openid; cd /usr/share/opensearch-dashboards; ./opensearch-dashboards-docker-entrypoint.sh opensearch-dashboards
        image: opensearchproject/opensearch-dashboards:2.1.0
        imagePullPolicy: IfNotPresent
        name: dashboards
        ports:
        - containerPort: 5601
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 100m
            memory: 512M
          requests:
            cpu: 100m
            memory: 512M
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/share/opensearch-dashboards/config/opensearch_dashboards.yml
          name: config
          subPath: opensearch_dashboards.yml
        - mountPath: /override
          name: dashboard-security-override
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: opensearch-dashboards-dashboards
      serviceAccountName: opensearch-dashboards-dashboards
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          name: opensearch-dashboards-config
        name: config
      - configMap:
          defaultMode: 420
          name: dashboard-security-override
        name: dashboard-security-override
---
# Source: opensearch-dashboards/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: opensearch-dashboards
  labels:
    helm.sh/chart: opensearch-dashboards-2.2.2
    app.kubernetes.io/name: opensearch-dashboards
    app.kubernetes.io/instance: opensearch-dashboards
    app.kubernetes.io/version: "2.1.0"
    app.kubernetes.io/managed-by: Helm
spec:
  tls:
    - hosts:
        - "server.net"
      secretName: opensearch-tls
  rules:
    - host: "server.net"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: opensearch-dashboards
                port:
                  number: 5601
